#include <SoftwareSerial.h>

#define c  261
#define d  294
#define e  329
#define f  349
#define g  391
#define gS  415
#define a  440
#define aS  455
#define b  466
#define cH  523
#define cSH  554
#define dH  587
#define dSH  622
#define eH  659
#define fH  698
#define fSH  740
#define gH  784
#define gSH 830
#define aH 880
 
#define buzzerPin 10
#define ledPin1 13
#define ledPin2 13 

SoftwareSerial mySerial(3, 2);      // A6 Tx & Rx is connected to Arduino #3 & #2
int counter = 0; 

void playStarWars() {
  playTune1();
  playTune2();
  beep(f, 250);  
  beep(gS, 500);  
  beep(f, 350);  
  beep(a, 125);
  beep(cH, 500);
  beep(a, 375);  
  beep(cH, 125);
  beep(eH, 650);
  delay(500);
  
  playTune2();
  beep(f, 250);  
  beep(gS, 500);  
  beep(f, 375);  
  beep(cH, 125);
  beep(a, 500);  
  beep(f, 375);  
  beep(cH, 125);
  beep(a, 650);  
  delay(650);
}
 
void beep(int note, int duration) {
  tone(buzzerPin, note, duration);
  if(counter % 2 == 0) {
    digitalWrite(ledPin1, HIGH);
    delay(duration);
    digitalWrite(ledPin1, LOW);
  } else {
    digitalWrite(ledPin2, HIGH);
    delay(duration);
    digitalWrite(ledPin2, LOW);
  }
  noTone(buzzerPin);
  delay(50);
  counter++;
}
 
void playTune1() {
  beep(a, 500);
  beep(a, 500);    
  beep(a, 500);
  beep(f, 350);
  beep(cH, 150);  
  beep(a, 500);
  beep(f, 350);
  beep(cH, 150);
  beep(a, 650);
  delay(500);
 
  beep(eH, 500);
  beep(eH, 500);
  beep(eH, 500);  
  beep(fH, 350);
  beep(cH, 150);
  beep(gS, 500);
  beep(f, 350);
  beep(cH, 150);
  beep(a, 650);
  delay(500);
}
 
void playTune2() {
  beep(aH, 500);
  beep(a, 300);
  beep(a, 150);
  beep(aH, 500);
  beep(gSH, 325);
  beep(gH, 175);
  beep(fSH, 125);
  beep(fH, 125);    
  beep(fSH, 250);
  delay(325);
 
  beep(aS, 250);
  beep(dSH, 500);
  beep(dH, 325);  
  beep(cSH, 175);  
  beep(cH, 125);  
  beep(b, 125);  
  beep(cH, 250);  
  delay(350);
}

void setup() {
  Serial.begin(9600);
  pinMode(buzzerPin, OUTPUT);
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);

  mySerial.begin(9600);
  Serial.println("Searching for Network...");    // Print the Message
  delay(1000);
  mySerial.println("AT"); // Once the handshake test is successful, it will back to OK
  updateSerial();
  mySerial.println("AT+CSQ"); // Signal quality test, value range is 0-31 , 31 is the best
  updateSerial();
  mySerial.println("AT+CCID"); // Read SIM information to confirm whether the SIM is plugged
  updateSerial();
  mySerial.println("AT+CREG?"); // Check whether it has registered in the network
  updateSerial();
  mySerial.println("ATI"); // GET the module and revision
  updateSerial();
  mySerial.println("AT+COPS?"); // check which network you are connectted to
  updateSerial();
  mySerial.println("AT+COPS=?"); // return the list of operators present in the network
  updateSerial();
  Serial.println("Connected to the Network ^_^ ");
}
 
static int played = 0;
void loop()
{
  played = 0;
  digitalWrite(13, LOW);
  updateSerial();

}

char Buf[256]={'\0'};
int count = 0;

void updateSerial()
{
  count = 0;
  memset(Buf, '\0', sizeof(Buf));
  delay(500);

  while (Serial.available()) {
    mySerial.write(Serial.read()); // Forward what Serial received to Software Serial Port
  }

  while(mySerial.available()) {
        Buf[count++]= mySerial.read();//Forward what Software Serial received to Serial Port
        if(count == 4) {
          
         if((strstr(Buf,"RING"))!=NULL && played == 0) {
            played = 1;
            memset(Buf, '\0', sizeof("RING"));
            count = 0;
            Serial.println("\nRINGING...");
            playStarWars();
            Serial.println("\nCall Disconnected\n");
            delay(5000);
            break;
          }
        } else
              Serial.write(Buf[count]);
  }
}
